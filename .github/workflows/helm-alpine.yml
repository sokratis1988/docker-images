name: helm

on:
  push:
    branches:
      - "main"
      - "dev"
  schedule: 
    - cron: '0 0 * * *'
  workflow_dispatch: {}

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      helm-versions: ${{ steps.get-helm-releases.outputs.helm-versions }}
      helm-push-versions: ${{ steps.get-helm-push-releases.outputs.helm-push-versions }}
    steps:
      - uses: actions/checkout@v3

      - name: Get helm releases
        id: get-helm-releases
        run: |
          chmod +x ./prepare.sh
          HELM_VERSIONS=$(
            ./prepare.sh \
              --github-repo helm \
              --github-project helm \
              --per-page 100 \
              --exclude-release-candidates \
              --exclude-alpha \
            | jq -c '
                # nur stabile v3 SemVer
                map(select(test("^v3\\.[0-9]+\\.[0-9]+$"))) 
                # parse zu Zahlen-Teilen
                | map({v: ., parts: (.[1:] | split(".") | map(tonumber))})
                # nach Major.Minor.Patch sortieren
                | sort_by(.parts)
                # nach Minor gruppieren (parts[1] == Minor)
                | group_by(.parts[1])
                # pro Gruppe den letzten (=hÃ¶chsten Patch) nehmen
                | map(last.v)
                # am Ende absteigend sortieren (neueste zuerst)
                | sort_by(.[1:] | split(".") | map(tonumber)) | reverse
              '
          )
          echo "helm-versions=${HELM_VERSIONS}" >> "$GITHUB_OUTPUT"


      - name: Get helm-push releases
        id: get-helm-push-releases
        run: |
          chmod +x ./prepare.sh
          PUSH_VERSIONS=$(
            ./prepare.sh --github-repo chartmuseum --github-project helm-push --per-page 30 \
            | jq -c '.'
          )
          echo "helm-push-versions=${PUSH_VERSIONS}" >> "$GITHUB_OUTPUT"

  build:
    needs: get-versions
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        helm-version: ${{ fromJson(needs.get-versions.outputs.helm-versions) }}
        helm-push-version: ${{ fromJson(needs.get-versions.outputs.helm-push-versions) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Prepare Helm Version
        run: echo "HELM_VERSION=${{ matrix.helm-version }}" | sed 's/v//g' > $GITHUB_ENV
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: helm/alpine/
          file: helm/alpine/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            sokratis1988/helm:${{ env.HELM_VERSION }}
            ghcr.io/sokratis1988/helm:${{ env.HELM_VERSION }}
          build-args: |
            "HELM_VERSION=${{ matrix.helm-version }}"
      -
        name: Build and push with kubelogin
        uses: docker/build-push-action@v6
        with:
          context: helm/alpine/
          file: helm/alpine/Dockerfile-kubelogin
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            sokratis1988/helm:${{ env.HELM_VERSION }}-kubelogin
            ghcr.io/sokratis1988/helm:${{ env.HELM_VERSION }}-kubelogin
          build-args: |
            "HELM_VERSION=${{ matrix.helm-version }}"
    